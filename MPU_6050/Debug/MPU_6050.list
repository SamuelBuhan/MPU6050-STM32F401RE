
MPU_6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005824  08005824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800582c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000000c  08005838  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005838  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f99  00000000  00000000  0002db46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c66  00000000  00000000  00030f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e4  00000000  00000000  00046bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008403c  00000000  00000000  0005519a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d91d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a5c  00000000  00000000  000d922c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080057a4 	.word	0x080057a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080057a4 	.word	0x080057a4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_DMA_Init+0x4c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <MX_DMA_Init+0x4c>)
 80004dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_DMA_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200b      	movs	r0, #11
 80004f4:	f000 fd6d 	bl	8000fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80004f8:	200b      	movs	r0, #11
 80004fa:	f000 fd86 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2011      	movs	r0, #17
 8000504:	f000 fd65 	bl	8000fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000508:	2011      	movs	r0, #17
 800050a:	f000 fd7e 	bl	800100a <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	4b35      	ldr	r3, [pc, #212]	; (800060c <MX_GPIO_Init+0xf0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a34      	ldr	r2, [pc, #208]	; (800060c <MX_GPIO_Init+0xf0>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <MX_GPIO_Init+0xf0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_GPIO_Init+0xf0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2d      	ldr	r2, [pc, #180]	; (800060c <MX_GPIO_Init+0xf0>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_GPIO_Init+0xf0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_GPIO_Init+0xf0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a26      	ldr	r2, [pc, #152]	; (800060c <MX_GPIO_Init+0xf0>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_GPIO_Init+0xf0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_GPIO_Init+0xf0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1f      	ldr	r2, [pc, #124]	; (800060c <MX_GPIO_Init+0xf0>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_GPIO_Init+0xf0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Alim_MPU6050_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <MX_GPIO_Init+0xf4>)
 80005aa:	f001 fa79 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <MX_GPIO_Init+0xf8>)
 80005c6:	f001 f8e7 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ca:	2320      	movs	r3, #32
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <MX_GPIO_Init+0xf4>)
 80005e2:	f001 f8d9 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Alim_MPU6050_Pin;
 80005e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Alim_MPU6050_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_GPIO_Init+0xf4>)
 8000600:	f001 f8ca 	bl	8001798 <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020800 	.word	0x40020800

08000618 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f001 fa3d 	bl	8001ad4 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 fa06 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000088 	.word	0x20000088
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a50      	ldr	r2, [pc, #320]	; (80007d4 <HAL_I2C_MspInit+0x160>)
 8000692:	4293      	cmp	r3, r2
 8000694:	f040 8099 	bne.w	80007ca <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ba:	2312      	movs	r3, #18
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c6:	2304      	movs	r3, #4
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4842      	ldr	r0, [pc, #264]	; (80007dc <HAL_I2C_MspInit+0x168>)
 80006d2:	f001 f861 	bl	8001798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a3e      	ldr	r2, [pc, #248]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 80006e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <HAL_I2C_MspInit+0x164>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80006f2:	4b3b      	ldr	r3, [pc, #236]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 80006f4:	4a3b      	ldr	r2, [pc, #236]	; (80007e4 <HAL_I2C_MspInit+0x170>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 80006fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 800070e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000712:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000714:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071a:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000732:	482b      	ldr	r0, [pc, #172]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000734:	f000 fc84 	bl	8001040 <HAL_DMA_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800073e:	f000 f997 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 8000746:	639a      	str	r2, [r3, #56]	; 0x38
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <HAL_I2C_MspInit+0x16c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <HAL_I2C_MspInit+0x178>)
 8000752:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800075a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 800075e:	2240      	movs	r2, #64	; 0x40
 8000760:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800078e:	4816      	ldr	r0, [pc, #88]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 8000790:	f000 fc56 	bl	8001040 <HAL_DMA_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800079a:	f000 f969 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <HAL_I2C_MspInit+0x174>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	201f      	movs	r0, #31
 80007b0:	f000 fc0f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007b4:	201f      	movs	r0, #31
 80007b6:	f000 fc28 	bl	800100a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2020      	movs	r0, #32
 80007c0:	f000 fc07 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007c4:	2020      	movs	r0, #32
 80007c6:	f000 fc20 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	40026010 	.word	0x40026010
 80007e8:	20000028 	.word	0x20000028
 80007ec:	400260a0 	.word	0x400260a0

080007f0 <MX_I2C1_Configuration>:
}

/* USER CODE BEGIN 1 */

void MX_I2C1_Configuration(I2cConfig_st* pI2cConfig)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	I2c1Config.fEndRx = pI2cConfig->fEndRx;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <MX_I2C1_Configuration+0x34>)
 80007fe:	6053      	str	r3, [r2, #4]
	I2c1Config.fEndTx = pI2cConfig->fEndTx;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <MX_I2C1_Configuration+0x34>)
 8000806:	6013      	str	r3, [r2, #0]
	I2c1Config.fError = pI2cConfig->fError;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <MX_I2C1_Configuration+0x34>)
 800080e:	6093      	str	r3, [r2, #8]
	I2c1Config.DevAddress = pI2cConfig->DevAddress;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	899a      	ldrh	r2, [r3, #12]
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <MX_I2C1_Configuration+0x34>)
 8000816:	819a      	strh	r2, [r3, #12]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	2000013c 	.word	0x2000013c

08000828 <MX_I2C1_Mem_Write>:
{
	HAL_I2C_Master_Receive_IT(&hi2c1, I2c1Config.DevAddress, pRxBuffer, ucSize);
}

void MX_I2C1_Mem_Write(uint16_t memAdress, uint16_t memSize,uint8_t* pTxBuffer, uint8_t ucSize)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	60ba      	str	r2, [r7, #8]
 8000830:	461a      	mov	r2, r3
 8000832:	4603      	mov	r3, r0
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	460b      	mov	r3, r1
 8000838:	81bb      	strh	r3, [r7, #12]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
	//HAL_I2C_Master_Transmit_IT(&hi2c1, I2c1Config.DevAddress, pTxBuffer, ucSize);
	//HAL_I2C_Mem_Write_IT(&hi2c1, I2c1Config.DevAddress, memAdress, memSize, pTxBuffer, ucSize);
	HAL_I2C_Mem_Write_DMA(&hi2c1, I2c1Config.DevAddress, memAdress, memSize, pTxBuffer, ucSize);
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_I2C1_Mem_Write+0x38>)
 8000840:	8999      	ldrh	r1, [r3, #12]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	b29b      	uxth	r3, r3
 8000846:	89b8      	ldrh	r0, [r7, #12]
 8000848:	89fa      	ldrh	r2, [r7, #14]
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4603      	mov	r3, r0
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_I2C1_Mem_Write+0x3c>)
 8000854:	f001 fa82 	bl	8001d5c <HAL_I2C_Mem_Write_DMA>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000013c 	.word	0x2000013c
 8000864:	20000088 	.word	0x20000088

08000868 <MX_I2C1_Mem_Read>:

void MX_I2C1_Mem_Read(uint16_t memAdress, uint16_t memSize,uint8_t* pRxBuffer, uint8_t ucSize)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af02      	add	r7, sp, #8
 800086e:	60ba      	str	r2, [r7, #8]
 8000870:	461a      	mov	r2, r3
 8000872:	4603      	mov	r3, r0
 8000874:	81fb      	strh	r3, [r7, #14]
 8000876:	460b      	mov	r3, r1
 8000878:	81bb      	strh	r3, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	//HAL_I2C_Mem_Read_IT(&hi2c1, I2c1Config.DevAddress, memAdress, memSize, pRxBuffer, ucSize);
	HAL_I2C_Mem_Read_DMA(&hi2c1, I2c1Config.DevAddress, memAdress, memSize, pRxBuffer, ucSize);
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_I2C1_Mem_Read+0x38>)
 8000880:	8999      	ldrh	r1, [r3, #12]
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29b      	uxth	r3, r3
 8000886:	89b8      	ldrh	r0, [r7, #12]
 8000888:	89fa      	ldrh	r2, [r7, #14]
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4603      	mov	r3, r0
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Mem_Read+0x3c>)
 8000894:	f001 fbc4 	bl	8002020 <HAL_I2C_Mem_Read_DMA>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000013c 	.word	0x2000013c
 80008a4:	20000088 	.word	0x20000088

080008a8 <HAL_I2C_MasterTxCpltCallback>:


/* Callbacks */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_I2C_MasterTxCpltCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d102      	bne.n	80008c0 <HAL_I2C_MasterTxCpltCallback+0x18>
	{
		I2c1Config.fEndTx();
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4798      	blx	r3
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40005400 	.word	0x40005400
 80008cc:	2000013c 	.word	0x2000013c

080008d0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d102      	bne.n	80008e8 <HAL_I2C_MasterRxCpltCallback+0x18>
	{
		I2c1Config.fEndRx();
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4798      	blx	r3
	}
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005400 	.word	0x40005400
 80008f4:	2000013c 	.word	0x2000013c

080008f8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <HAL_I2C_MemTxCpltCallback+0x18>
	{
		I2c1Config.fEndTx();
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_I2C_MemTxCpltCallback+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4798      	blx	r3
	}

}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40005400 	.word	0x40005400
 800091c:	2000013c 	.word	0x2000013c

08000920 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_I2C_MemRxCpltCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d102      	bne.n	8000938 <HAL_I2C_MemRxCpltCallback+0x18>
	{
		I2c1Config.fEndRx();
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4798      	blx	r3
	}
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005400 	.word	0x40005400
 8000944:	2000013c 	.word	0x2000013c

08000948 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_I2C_ErrorCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d102      	bne.n	8000960 <HAL_I2C_ErrorCallback+0x18>
	{
		I2c1Config.fError();
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <HAL_I2C_ErrorCallback+0x24>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	4798      	blx	r3
	}
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	2000013c 	.word	0x2000013c

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 f9bc 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f80e 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f7ff fdce 	bl	800051c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000980:	f000 f908 	bl	8000b94 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000984:	f7ff fda2 	bl	80004cc <MX_DMA_Init>
  MX_I2C1_Init();
 8000988:	f7ff fe46 	bl	8000618 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_init();
 800098c:	f004 fd52 	bl	8005434 <MPU6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MPU6050_main();
 8000990:	f004 fdf2 	bl	8005578 <MPU6050_main>
 8000994:	e7fc      	b.n	8000990 <main+0x20>
	...

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	; 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fef4 	bl	8005794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <SystemClock_Config+0xd0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <SystemClock_Config+0xd0>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemClock_Config+0xd0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <SystemClock_Config+0xd4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <SystemClock_Config+0xd4>)
 80009e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <SystemClock_Config+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2310      	movs	r3, #16
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fd06 	bl	8004434 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a2e:	f000 f81f 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	230f      	movs	r3, #15
 8000a34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 ff68 	bl	8004924 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a5a:	f000 f809 	bl	8000a70 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3750      	adds	r7, #80	; 0x50
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f000 fa7e 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f93c 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <DMA1_Stream0_IRQHandler+0x10>)
 8000b26:	f000 fbb3 	bl	8001290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000dc 	.word	0x200000dc

08000b34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Stream6_IRQHandler+0x10>)
 8000b3a:	f000 fba9 	bl	8001290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000028 	.word	0x20000028

08000b48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <I2C1_EV_IRQHandler+0x10>)
 8000b4e:	f001 fbfb 	bl	8002348 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000088 	.word	0x20000088

08000b5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <I2C1_ER_IRQHandler+0x10>)
 8000b62:	f001 fd62 	bl	800262a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000088 	.word	0x20000088

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART2_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	f004 f8a6 	bl	8004d1c <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f7ff ff4b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000014c 	.word	0x2000014c
 8000be4:	40004400 	.word	0x40004400

08000be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c42:	230c      	movs	r3, #12
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c52:	2307      	movs	r3, #7
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c5e:	f000 fd9b 	bl	8001798 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <MX_USART2_Transmit>:

/* USER CODE BEGIN 1 */


void MX_USART2_Transmit(uint8_t * pData, uint16_t size)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, pData, size, 0xFF);
 8000c84:	887a      	ldrh	r2, [r7, #2]
 8000c86:	23ff      	movs	r3, #255	; 0xff
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_USART2_Transmit+0x20>)
 8000c8c:	f004 f893 	bl	8004db6 <HAL_UART_Transmit>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000014c 	.word	0x2000014c

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ff53 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f004 fd3f 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fe4f 	bl	8000970 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce0:	0800582c 	.word	0x0800582c
  ldr r2, =_sbss
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ce8:	20000398 	.word	0x20000398

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f94f 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff feaa 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f967 	bl	8001026 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f92f 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000190 	.word	0x20000190

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000190 	.word	0x20000190

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff feb6 	bl	8000dbc <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e099      	b.n	8001190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800107c:	e00f      	b.n	800109e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800107e:	f7ff fe9d 	bl	8000dbc <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b05      	cmp	r3, #5
 800108a:	d908      	bls.n	800109e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2220      	movs	r2, #32
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e078      	b.n	8001190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e8      	bne.n	800107e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_DMA_Init+0x158>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d107      	bne.n	8001108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4313      	orrs	r3, r2
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f023 0307 	bic.w	r3, r3, #7
 800111e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4313      	orrs	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	2b04      	cmp	r3, #4
 8001130:	d117      	bne.n	8001162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4313      	orrs	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00e      	beq.n	8001162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 faab 	bl	80016a0 <DMA_CheckFifoParam>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800115e:	2301      	movs	r3, #1
 8001160:	e016      	b.n	8001190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa62 	bl	8001634 <DMA_CalcBaseAndBitshift>
 8001170:	4603      	mov	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	223f      	movs	r2, #63	; 0x3f
 800117a:	409a      	lsls	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	f010803f 	.word	0xf010803f

0800119c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_DMA_Start_IT+0x26>
 80011be:	2302      	movs	r3, #2
 80011c0:	e040      	b.n	8001244 <HAL_DMA_Start_IT+0xa8>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d12f      	bne.n	8001236 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2202      	movs	r2, #2
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 f9f4 	bl	80015d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	223f      	movs	r2, #63	; 0x3f
 80011f6:	409a      	lsls	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0216 	orr.w	r2, r2, #22
 800120a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0208 	orr.w	r2, r2, #8
 8001222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e005      	b.n	8001242 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800123e:	2302      	movs	r3, #2
 8001240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001242:	7dfb      	ldrb	r3, [r7, #23]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d004      	beq.n	800126a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00c      	b.n	8001284 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2205      	movs	r2, #5
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800129c:	4b92      	ldr	r3, [pc, #584]	; (80014e8 <HAL_DMA_IRQHandler+0x258>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a92      	ldr	r2, [pc, #584]	; (80014ec <HAL_DMA_IRQHandler+0x25c>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0a9b      	lsrs	r3, r3, #10
 80012a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	2208      	movs	r2, #8
 80012bc:	409a      	lsls	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d01a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0204 	bic.w	r2, r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e8:	2208      	movs	r2, #8
 80012ea:	409a      	lsls	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	2201      	movs	r2, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d012      	beq.n	8001332 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131e:	2201      	movs	r2, #1
 8001320:	409a      	lsls	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	f043 0202 	orr.w	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	2204      	movs	r2, #4
 8001338:	409a      	lsls	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	2204      	movs	r2, #4
 8001356:	409a      	lsls	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001360:	f043 0204 	orr.w	r2, r3, #4
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	2210      	movs	r2, #16
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d043      	beq.n	8001400 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03c      	beq.n	8001400 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2210      	movs	r2, #16
 800138c:	409a      	lsls	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d018      	beq.n	80013d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d024      	beq.n	8001400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	4798      	blx	r3
 80013be:	e01f      	b.n	8001400 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01b      	beq.n	8001400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4798      	blx	r3
 80013d0:	e016      	b.n	8001400 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d107      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0208 	bic.w	r2, r2, #8
 80013ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2220      	movs	r2, #32
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 808e 	beq.w	800152e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8086 	beq.w	800152e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	2220      	movs	r2, #32
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b05      	cmp	r3, #5
 8001438:	d136      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0216 	bic.w	r2, r2, #22
 8001448:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001458:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <HAL_DMA_IRQHandler+0x1da>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	223f      	movs	r2, #63	; 0x3f
 8001480:	409a      	lsls	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149a:	2b00      	cmp	r3, #0
 800149c:	d07d      	beq.n	800159a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
        }
        return;
 80014a6:	e078      	b.n	800159a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01c      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d108      	bne.n	80014d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d030      	beq.n	800152e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	e02b      	b.n	800152e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d027      	beq.n	800152e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4798      	blx	r3
 80014e6:	e022      	b.n	800152e <HAL_DMA_IRQHandler+0x29e>
 80014e8:	20000000 	.word	0x20000000
 80014ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0210 	bic.w	r2, r2, #16
 800150c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	2b00      	cmp	r3, #0
 8001534:	d032      	beq.n	800159c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d022      	beq.n	8001588 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0201 	bic.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3301      	adds	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	429a      	cmp	r2, r3
 8001564:	d307      	bcc.n	8001576 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f2      	bne.n	800155a <HAL_DMA_IRQHandler+0x2ca>
 8001574:	e000      	b.n	8001578 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001576:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e000      	b.n	800159c <HAL_DMA_IRQHandler+0x30c>
        return;
 800159a:	bf00      	nop
    }
  }
}
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop

080015a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b2:	b2db      	uxtb	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b40      	cmp	r3, #64	; 0x40
 8001604:	d108      	bne.n	8001618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001616:	e007      	b.n	8001628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3b10      	subs	r3, #16
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <DMA_CalcBaseAndBitshift+0x64>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <DMA_CalcBaseAndBitshift+0x68>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d909      	bls.n	8001676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	1d1a      	adds	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
 8001674:	e007      	b.n	8001686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	08005814 	.word	0x08005814

080016a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11f      	bne.n	80016fa <DMA_CheckFifoParam+0x5a>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d856      	bhi.n	800176e <DMA_CheckFifoParam+0xce>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x28>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016eb 	.word	0x080016eb
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	0800176f 	.word	0x0800176f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d046      	beq.n	8001772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e8:	e043      	b.n	8001772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f2:	d140      	bne.n	8001776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f8:	e03d      	b.n	8001776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001702:	d121      	bne.n	8001748 <DMA_CheckFifoParam+0xa8>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d837      	bhi.n	800177a <DMA_CheckFifoParam+0xda>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <DMA_CheckFifoParam+0x70>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001721 	.word	0x08001721
 8001714:	08001727 	.word	0x08001727
 8001718:	08001721 	.word	0x08001721
 800171c:	08001739 	.word	0x08001739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e030      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d025      	beq.n	800177e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001736:	e022      	b.n	800177e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001740:	d11f      	bne.n	8001782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001746:	e01c      	b.n	8001782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d903      	bls.n	8001756 <DMA_CheckFifoParam+0xb6>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d003      	beq.n	800175c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001754:	e018      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
      break;
 800175a:	e015      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00e      	beq.n	8001786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      break;
 800176c:	e00b      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 800176e:	bf00      	nop
 8001770:	e00a      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001772:	bf00      	nop
 8001774:	e008      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001776:	bf00      	nop
 8001778:	e006      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 800177a:	bf00      	nop
 800177c:	e004      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 800177e:	bf00      	nop
 8001780:	e002      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;   
 8001782:	bf00      	nop
 8001784:	e000      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
    }
  } 
  
  return status; 
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e159      	b.n	8001a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8148 	bne.w	8001a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a2 	beq.w	8001a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x202>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <HAL_GPIO_Init+0x2f4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x1fe>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_GPIO_Init+0x2f8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x1fa>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_GPIO_Init+0x2fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x1f6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_GPIO_Init+0x300>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x1f2>
 8001986:	2304      	movs	r3, #4
 8001988:	e008      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198a:	2307      	movs	r3, #7
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x204>
 800198e:	2303      	movs	r3, #3
 8001990:	e004      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001992:	2302      	movs	r3, #2
 8001994:	e002      	b.n	800199c <HAL_GPIO_Init+0x204>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_GPIO_Init+0x204>
 800199a:	2300      	movs	r3, #0
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	f002 0203 	and.w	r2, r2, #3
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	4093      	lsls	r3, r2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_GPIO_Init+0x304>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3301      	adds	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	f67f aea2 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e12b      	b.n	8001d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fdba 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b38:	f003 f8c8 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8001b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4a81      	ldr	r2, [pc, #516]	; (8001d48 <HAL_I2C_Init+0x274>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d807      	bhi.n	8001b58 <HAL_I2C_Init+0x84>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a80      	ldr	r2, [pc, #512]	; (8001d4c <HAL_I2C_Init+0x278>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	bf94      	ite	ls
 8001b50:	2301      	movls	r3, #1
 8001b52:	2300      	movhi	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	e006      	b.n	8001b66 <HAL_I2C_Init+0x92>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a7d      	ldr	r2, [pc, #500]	; (8001d50 <HAL_I2C_Init+0x27c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0e7      	b.n	8001d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4a78      	ldr	r2, [pc, #480]	; (8001d54 <HAL_I2C_Init+0x280>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0c9b      	lsrs	r3, r3, #18
 8001b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_I2C_Init+0x274>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d802      	bhi.n	8001ba8 <HAL_I2C_Init+0xd4>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	e009      	b.n	8001bbc <HAL_I2C_Init+0xe8>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <HAL_I2C_Init+0x284>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	3301      	adds	r3, #1
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	495c      	ldr	r1, [pc, #368]	; (8001d48 <HAL_I2C_Init+0x274>)
 8001bd8:	428b      	cmp	r3, r1
 8001bda:	d819      	bhi.n	8001c10 <HAL_I2C_Init+0x13c>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e59      	subs	r1, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bea:	1c59      	adds	r1, r3, #1
 8001bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_I2C_Init+0x138>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e59      	subs	r1, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0a:	e051      	b.n	8001cb0 <HAL_I2C_Init+0x1dc>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e04f      	b.n	8001cb0 <HAL_I2C_Init+0x1dc>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d111      	bne.n	8001c3c <HAL_I2C_Init+0x168>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e58      	subs	r0, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	440b      	add	r3, r1
 8001c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e012      	b.n	8001c62 <HAL_I2C_Init+0x18e>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e58      	subs	r0, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x196>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e022      	b.n	8001cb0 <HAL_I2C_Init+0x1dc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10e      	bne.n	8001c90 <HAL_I2C_Init+0x1bc>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1e58      	subs	r0, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	440b      	add	r3, r1
 8001c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	e00f      	b.n	8001cb0 <HAL_I2C_Init+0x1dc>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	0099      	lsls	r1, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	6809      	ldr	r1, [r1, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6911      	ldr	r1, [r2, #16]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68d2      	ldr	r2, [r2, #12]
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	000186a0 	.word	0x000186a0
 8001d4c:	001e847f 	.word	0x001e847f
 8001d50:	003d08ff 	.word	0x003d08ff
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	10624dd3 	.word	0x10624dd3

08001d5c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d7a:	f7ff f81f 	bl	8000dbc <HAL_GetTick>
 8001d7e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	f040 813a 	bne.w	8002002 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d8e:	4b9f      	ldr	r3, [pc, #636]	; (800200c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	4a9e      	ldr	r2, [pc, #632]	; (8002010 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a1a      	lsrs	r2, r3, #8
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d116      	bne.n	8001de2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e110      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d0db      	beq.n	8001da8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Mem_Write_DMA+0xa2>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e102      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2221      	movs	r2, #33	; 0x21
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a6c      	ldr	r2, [pc, #432]	; (8002014 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001e66:	897a      	ldrh	r2, [r7, #10]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001e6c:	893a      	ldrh	r2, [r7, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a9 	beq.w	8001fda <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d02a      	beq.n	8001ee6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	4a60      	ldr	r2, [pc, #384]	; (8002018 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	4a5f      	ldr	r2, [pc, #380]	; (800201c <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8001e9e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3310      	adds	r3, #16
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	f7ff f961 	bl	800119c <HAL_DMA_Start_IT>
 8001eda:	4603      	mov	r3, r0
 8001edc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001ede:	7efb      	ldrb	r3, [r7, #27]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d166      	bne.n	8001fb2 <HAL_I2C_Mem_Write_DMA+0x256>
 8001ee4:	e013      	b.n	8001f0e <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07a      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001f0e:	88f8      	ldrh	r0, [r7, #6]
 8001f10:	893a      	ldrh	r2, [r7, #8]
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2323      	movs	r3, #35	; 0x23
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f001 fdbc 	bl	8003a9c <I2C_RequestMemoryWrite>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d022      	beq.n	8001f70 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f98c 	bl	800124c <HAL_DMA_Abort_IT>
 8001f34:	4603      	mov	r3, r0
 8001f36:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e049      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fac:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e028      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0210 	orr.w	r2, r3, #16
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e014      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000000 	.word	0x20000000
 8002010:	14f8b589 	.word	0x14f8b589
 8002014:	ffff0000 	.word	0xffff0000
 8002018:	08003d99 	.word	0x08003d99
 800201c:	08003f43 	.word	0x08003f43

08002020 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	817b      	strh	r3, [r7, #10]
 8002032:	460b      	mov	r3, r1
 8002034:	813b      	strh	r3, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800203a:	f7fe febf 	bl	8000dbc <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	f040 8176 	bne.w	800233e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	4a94      	ldr	r2, [pc, #592]	; (80022ac <HAL_I2C_Mem_Read_DMA+0x28c>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a1a      	lsrs	r2, r3, #8
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009a      	lsls	r2, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3b01      	subs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e14c      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d0db      	beq.n	800206c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80020be:	2302      	movs	r3, #2
 80020c0:	e13e      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d007      	beq.n	80020e8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2222      	movs	r2, #34	; 0x22
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a62      	ldr	r2, [pc, #392]	; (80022b0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800212a:	897a      	ldrh	r2, [r7, #10]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002130:	893a      	ldrh	r2, [r7, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80cc 	beq.w	80022e4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02d      	beq.n	80021b0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	4a56      	ldr	r2, [pc, #344]	; (80022b4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8002162:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	2200      	movs	r2, #0
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2200      	movs	r2, #0
 800217a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	2200      	movs	r2, #0
 8002182:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3310      	adds	r3, #16
 800218e:	4619      	mov	r1, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	461a      	mov	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	f7fe ffff 	bl	800119c <HAL_DMA_Start_IT>
 800219e:	4603      	mov	r3, r0
 80021a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80021a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 8087 	bne.w	80022bc <HAL_I2C_Mem_Read_DMA+0x29c>
 80021ae:	e013      	b.n	80021d8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0b3      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80021d8:	88f8      	ldrh	r0, [r7, #6]
 80021da:	893a      	ldrh	r2, [r7, #8]
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2323      	movs	r3, #35	; 0x23
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f001 fced 	bl	8003bc8 <I2C_RequestMemoryRead>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f827 	bl	800124c <HAL_DMA_Abort_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	2200      	movs	r2, #0
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e081      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e007      	b.n	8002266 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002264:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002292:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	e049      	b.n	800233a <HAL_I2C_Mem_Read_DMA+0x31a>
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000
 80022ac:	14f8b589 	.word	0x14f8b589
 80022b0:	ffff0000 	.word	0xffff0000
 80022b4:	08003d99 	.word	0x08003d99
 80022b8:	08003f43 	.word	0x08003f43
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e02d      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80022e4:	88f8      	ldrh	r0, [r7, #6]
 80022e6:	893a      	ldrh	r2, [r7, #8]
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2323      	movs	r3, #35	; 0x23
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4603      	mov	r3, r0
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f001 fc67 	bl	8003bc8 <I2C_RequestMemoryRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e01d      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002328:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002368:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d003      	beq.n	8002380 <HAL_I2C_EV_IRQHandler+0x38>
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	f040 80c1 	bne.w	8002502 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80023a0:	d003      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x62>
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_EV_IRQHandler+0x66>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_EV_IRQHandler+0x68>
 80023ae:	2300      	movs	r3, #0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f000 8132 	beq.w	800261a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_I2C_EV_IRQHandler+0x92>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	0a5b      	lsrs	r3, r3, #9
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f002 f816 	bl	80043fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fd47 	bl	8002e66 <I2C_Master_SB>
 80023d8:	e092      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xb2>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	0a5b      	lsrs	r3, r3, #9
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fdbd 	bl	8002f72 <I2C_Master_ADD10>
 80023f8:	e082      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xd2>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	0a5b      	lsrs	r3, r3, #9
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fdd7 	bl	8002fc6 <I2C_Master_ADDR>
 8002418:	e072      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03b      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002434:	f000 80f3 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	09db      	lsrs	r3, r3, #7
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00f      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9c1 	bl	80027e4 <I2C_MasterTransmit_TXE>
 8002462:	e04d      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80d6 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	0a5b      	lsrs	r3, r3, #9
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80cf 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	2b21      	cmp	r3, #33	; 0x21
 8002484:	d103      	bne.n	800248e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa48 	bl	800291c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248c:	e0c7      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	f040 80c4 	bne.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fab6 	bl	8002a08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249c:	e0bf      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ac:	f000 80b7 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fb2b 	bl	8002b30 <I2C_MasterReceive_RXNE>
 80024da:	e011      	b.n	8002500 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 809a 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8093 	beq.w	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fbca 	bl	8002c92 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fe:	e08e      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002500:	e08d      	b.n	800261e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e007      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d012      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x20e>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00c      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800254c:	69b9      	ldr	r1, [r7, #24]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 ff88 	bl	8003464 <I2C_Slave_ADDR>
 8002554:	e066      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x22e>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 ffc2 	bl	80034f8 <I2C_Slave_STOPF>
 8002574:	e056      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	2b21      	cmp	r3, #33	; 0x21
 800257a:	d002      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x23a>
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	2b29      	cmp	r3, #41	; 0x29
 8002580:	d125      	bne.n	80025ce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	09db      	lsrs	r3, r3, #7
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a9b      	lsrs	r3, r3, #10
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fe9e 	bl	80032e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ac:	e039      	b.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d033      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02d      	beq.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fecb 	bl	8003362 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025cc:	e029      	b.n	8002622 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00f      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a9b      	lsrs	r3, r3, #10
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fed6 	bl	80033a4 <I2C_SlaveReceive_RXNE>
 80025f8:	e014      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	0a5b      	lsrs	r3, r3, #9
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 ff04 	bl	8003420 <I2C_SlaveReceive_BTF>
 8002618:	e004      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800261a:	bf00      	nop
 800261c:	e002      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002622:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	; 0x28
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <HAL_I2C_ER_IRQHandler+0x4e>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002676:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	0a5b      	lsrs	r3, r3, #9
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <HAL_I2C_ER_IRQHandler+0x78>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80026a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	0a9b      	lsrs	r3, r3, #10
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03f      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d039      	beq.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80026ba:	7efb      	ldrb	r3, [r7, #27]
 80026bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026d4:	7ebb      	ldrb	r3, [r7, #26]
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d112      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b21      	cmp	r3, #33	; 0x21
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b29      	cmp	r3, #41	; 0x29
 80026ea:	d005      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0xce>
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b28      	cmp	r3, #40	; 0x28
 80026f0:	d106      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b21      	cmp	r3, #33	; 0x21
 80026f6:	d103      	bne.n	8002700 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 f82d 	bl	8003758 <I2C_Slave_AF>
 80026fe:	e016      	b.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002708:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d002      	beq.n	800271e <HAL_I2C_ER_IRQHandler+0xf4>
 8002718:	7efb      	ldrb	r3, [r7, #27]
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d107      	bne.n	800272e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	0adb      	lsrs	r3, r3, #11
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <HAL_I2C_ER_IRQHandler+0x12e>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002756:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 f864 	bl	8003838 <I2C_ITError>
  }
}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
 80027ac:	4613      	mov	r3, r2
 80027ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d150      	bne.n	80028ac <I2C_MasterTransmit_TXE+0xc8>
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b21      	cmp	r3, #33	; 0x21
 800280e:	d14d      	bne.n	80028ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d01d      	beq.n	8002852 <I2C_MasterTransmit_TXE+0x6e>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b20      	cmp	r3, #32
 800281a:	d01a      	beq.n	8002852 <I2C_MasterTransmit_TXE+0x6e>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002822:	d016      	beq.n	8002852 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002832:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2211      	movs	r2, #17
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe f82c 	bl	80008a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002850:	e060      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002860:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d107      	bne.n	800289c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe f82f 	bl	80008f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800289a:	e03b      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fd ffff 	bl	80008a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028aa:	e033      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b21      	cmp	r3, #33	; 0x21
 80028b0:	d005      	beq.n	80028be <I2C_MasterTransmit_TXE+0xda>
 80028b2:	7bbb      	ldrb	r3, [r7, #14]
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d12d      	bne.n	8002914 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b22      	cmp	r3, #34	; 0x22
 80028bc:	d12a      	bne.n	8002914 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028d8:	e01c      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d103      	bne.n	80028ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f88e 	bl	8002a08 <I2C_MemoryTransmit_TXE_BTF>
}
 80028ec:	e012      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002912:	e7ff      	b.n	8002914 <I2C_MasterTransmit_TXE+0x130>
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b21      	cmp	r3, #33	; 0x21
 8002934:	d164      	bne.n	8002a00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002964:	e04c      	b.n	8002a00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d01d      	beq.n	80029a8 <I2C_MasterTransmit_BTF+0x8c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b20      	cmp	r3, #32
 8002970:	d01a      	beq.n	80029a8 <I2C_MasterTransmit_BTF+0x8c>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002978:	d016      	beq.n	80029a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002988:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2211      	movs	r2, #17
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fd ff81 	bl	80008a8 <HAL_I2C_MasterTxCpltCallback>
}
 80029a6:	e02b      	b.n	8002a00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d107      	bne.n	80029f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd ff84 	bl	80008f8 <HAL_I2C_MemTxCpltCallback>
}
 80029f0:	e006      	b.n	8002a00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fd ff54 	bl	80008a8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11d      	bne.n	8002a5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10b      	bne.n	8002a40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002a3e:	e073      	b.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	121b      	asrs	r3, r3, #8
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a5a:	e065      	b.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10b      	bne.n	8002a7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a7a:	e055      	b.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d151      	bne.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b22      	cmp	r3, #34	; 0x22
 8002a88:	d10d      	bne.n	8002aa6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002aa4:	e040      	b.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b21      	cmp	r3, #33	; 0x21
 8002ab4:	d112      	bne.n	8002adc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ada:	e025      	b.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d120      	bne.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b21      	cmp	r3, #33	; 0x21
 8002aea:	d11d      	bne.n	8002b28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002afa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fee8 	bl	80008f8 <HAL_I2C_MemTxCpltCallback>
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b22      	cmp	r3, #34	; 0x22
 8002b42:	f040 80a2 	bne.w	8002c8a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d921      	bls.n	8002b98 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	f040 8082 	bne.w	8002c8a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002b96:	e078      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d074      	beq.n	8002c8a <I2C_MasterReceive_RXNE+0x15a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d002      	beq.n	8002bac <I2C_MasterReceive_RXNE+0x7c>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d16e      	bne.n	8002c8a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f001 fbc5 	bl	800433c <I2C_WaitOnSTOPRequestThroughIT>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d142      	bne.n	8002c3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d10a      	bne.n	8002c28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd fe7d 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
}
 8002c26:	e030      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2212      	movs	r2, #18
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fe4a 	bl	80008d0 <HAL_I2C_MasterRxCpltCallback>
}
 8002c3c:	e025      	b.n	8002c8a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fe5f 	bl	8000948 <HAL_I2C_ErrorCallback>
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d11b      	bne.n	8002ce2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ce0:	e0bd      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d129      	bne.n	8002d40 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d00a      	beq.n	8002d18 <I2C_MasterReceive_BTF+0x86>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d007      	beq.n	8002d18 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d3e:	e08e      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d176      	bne.n	8002e38 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d002      	beq.n	8002d56 <I2C_MasterReceive_BTF+0xc4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e019      	b.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d002      	beq.n	8002d74 <I2C_MasterReceive_BTF+0xe2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d108      	bne.n	8002d86 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e00a      	b.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d007      	beq.n	8002d9c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002df6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d10a      	bne.n	8002e22 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fd80 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
}
 8002e20:	e01d      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2212      	movs	r2, #18
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fd4d 	bl	80008d0 <HAL_I2C_MasterRxCpltCallback>
}
 8002e36:	e012      	b.n	8002e5e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d117      	bne.n	8002eaa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e92:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e94:	e067      	b.n	8002f66 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
}
 8002ea8:	e05d      	b.n	8002f66 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb2:	d133      	bne.n	8002f1c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b21      	cmp	r3, #33	; 0x21
 8002ebe:	d109      	bne.n	8002ed4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	e008      	b.n	8002ee6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <I2C_Master_SB+0x92>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <I2C_Master_SB+0x100>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d02d      	beq.n	8002f66 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f18:	605a      	str	r2, [r3, #4]
}
 8002f1a:	e024      	b.n	8002f66 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	11db      	asrs	r3, r3, #7
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0306 	and.w	r3, r3, #6
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f063 030f 	orn	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
}
 8002f40:	e011      	b.n	8002f66 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	11db      	asrs	r3, r3, #7
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0306 	and.w	r3, r3, #6
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f063 030e 	orn	r3, r3, #14
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <I2C_Master_ADD10+0x26>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00c      	beq.n	8002fba <I2C_Master_ADD10+0x48>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb8:	605a      	str	r2, [r3, #4]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b091      	sub	sp, #68	; 0x44
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b22      	cmp	r3, #34	; 0x22
 8002fee:	f040 8169 	bne.w	80032c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <I2C_Master_ADDR+0x54>
 8002ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d10b      	bne.n	800301a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	e160      	b.n	80032dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11d      	bne.n	800305e <I2C_Master_ADDR+0x98>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800302a:	d118      	bne.n	800305e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
 800305c:	e13e      	b.n	80032dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d113      	bne.n	8003090 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e115      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 808a 	bne.w	80031b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a2:	d137      	bne.n	8003114 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c2:	d113      	bne.n	80030ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	e0e7      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e0d3      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	2b08      	cmp	r3, #8
 8003118:	d02e      	beq.n	8003178 <I2C_Master_ADDR+0x1b2>
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	2b20      	cmp	r3, #32
 800311e:	d02b      	beq.n	8003178 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	2b12      	cmp	r3, #18
 8003124:	d102      	bne.n	800312c <I2C_Master_ADDR+0x166>
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	2b01      	cmp	r3, #1
 800312a:	d125      	bne.n	8003178 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	2b04      	cmp	r3, #4
 8003130:	d00e      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	2b02      	cmp	r3, #2
 8003136:	d00b      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	2b10      	cmp	r3, #16
 800313c:	d008      	beq.n	8003150 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800315e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	e0a1      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e085      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d14d      	bne.n	8003256 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d016      	beq.n	80031ee <I2C_Master_ADDR+0x228>
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d013      	beq.n	80031ee <I2C_Master_ADDR+0x228>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d010      	beq.n	80031ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e007      	b.n	80031fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d117      	bne.n	800323e <I2C_Master_ADDR+0x278>
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003214:	d00b      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b01      	cmp	r3, #1
 800321a:	d008      	beq.n	800322e <I2C_Master_ADDR+0x268>
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b08      	cmp	r3, #8
 8003220:	d005      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b10      	cmp	r3, #16
 8003226:	d002      	beq.n	800322e <I2C_Master_ADDR+0x268>
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	2b20      	cmp	r3, #32
 800322c:	d107      	bne.n	800323e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800323c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	e032      	b.n	80032bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003274:	d117      	bne.n	80032a6 <I2C_Master_ADDR+0x2e0>
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800327c:	d00b      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	2b01      	cmp	r3, #1
 8003282:	d008      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	2b08      	cmp	r3, #8
 8003288:	d005      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b10      	cmp	r3, #16
 800328e:	d002      	beq.n	8003296 <I2C_Master_ADDR+0x2d0>
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	2b20      	cmp	r3, #32
 8003294:	d107      	bne.n	80032a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032c2:	e00b      	b.n	80032dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	e7ff      	b.n	80032dc <I2C_Master_ADDR+0x316>
 80032dc:	bf00      	nop
 80032de:	3744      	adds	r7, #68	; 0x44
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02b      	beq.n	800335a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d114      	bne.n	800335a <I2C_SlaveTransmit_TXE+0x72>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b29      	cmp	r3, #41	; 0x29
 8003334:	d111      	bne.n	800335a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2228      	movs	r2, #40	; 0x28
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fa0f 	bl	8002778 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02c      	beq.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d114      	bne.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b2a      	cmp	r3, #42	; 0x2a
 80033f2:	d111      	bne.n	8003418 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2222      	movs	r2, #34	; 0x22
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2228      	movs	r2, #40	; 0x28
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff f9ba 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800347e:	2b28      	cmp	r3, #40	; 0x28
 8003480:	d127      	bne.n	80034d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	09db      	lsrs	r3, r3, #7
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	81bb      	strh	r3, [r7, #12]
 80034b4:	e002      	b.n	80034bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034c4:	89ba      	ldrh	r2, [r7, #12]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff f968 	bl	80027a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034d0:	e00e      	b.n	80034f0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003516:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003554:	d172      	bne.n	800363c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b22      	cmp	r3, #34	; 0x22
 800355a:	d002      	beq.n	8003562 <I2C_Slave_STOPF+0x6a>
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b2a      	cmp	r3, #42	; 0x2a
 8003560:	d135      	bne.n	80035ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe f802 	bl	80015a4 <HAL_DMA_GetState>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d049      	beq.n	800363a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4a69      	ldr	r2, [pc, #420]	; (8003750 <I2C_Slave_STOPF+0x258>)
 80035ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fe4a 	bl	800124c <HAL_DMA_Abort_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03d      	beq.n	800363a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c8:	4610      	mov	r0, r2
 80035ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035cc:	e035      	b.n	800363a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003600:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd ffcc 	bl	80015a4 <HAL_DMA_GetState>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d014      	beq.n	800363c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <I2C_Slave_STOPF+0x258>)
 8003618:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd fe14 	bl	800124c <HAL_DMA_Abort_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	e000      	b.n	800363c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800363a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d03e      	beq.n	80036c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d112      	bne.n	800367a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d112      	bne.n	80036ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8b3 	bl	8003838 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80036d2:	e039      	b.n	8003748 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b2a      	cmp	r3, #42	; 0x2a
 80036d8:	d109      	bne.n	80036ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2228      	movs	r2, #40	; 0x28
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff f84f 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b28      	cmp	r3, #40	; 0x28
 80036f8:	d111      	bne.n	800371e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <I2C_Slave_STOPF+0x25c>)
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff f850 	bl	80027bc <HAL_I2C_ListenCpltCallback>
}
 800371c:	e014      	b.n	8003748 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	2b22      	cmp	r3, #34	; 0x22
 8003724:	d002      	beq.n	800372c <I2C_Slave_STOPF+0x234>
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b22      	cmp	r3, #34	; 0x22
 800372a:	d10d      	bne.n	8003748 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f822 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08003fbd 	.word	0x08003fbd
 8003754:	ffff0000 	.word	0xffff0000

08003758 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d002      	beq.n	800377a <I2C_Slave_AF+0x22>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b20      	cmp	r3, #32
 8003778:	d129      	bne.n	80037ce <I2C_Slave_AF+0x76>
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b28      	cmp	r3, #40	; 0x28
 800377e:	d126      	bne.n	80037ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <I2C_Slave_AF+0xdc>)
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003794:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe fff8 	bl	80027bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80037cc:	e02e      	b.n	800382c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b21      	cmp	r3, #33	; 0x21
 80037d2:	d126      	bne.n	8003822 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <I2C_Slave_AF+0xdc>)
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2221      	movs	r2, #33	; 0x21
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003808:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003818:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe ffac 	bl	8002778 <HAL_I2C_SlaveTxCpltCallback>
}
 8003820:	e004      	b.n	800382c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800382a:	615a      	str	r2, [r3, #20]
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	ffff0000 	.word	0xffff0000

08003838 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003846:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003850:	7bbb      	ldrb	r3, [r7, #14]
 8003852:	2b10      	cmp	r3, #16
 8003854:	d002      	beq.n	800385c <I2C_ITError+0x24>
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d10a      	bne.n	8003872 <I2C_ITError+0x3a>
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b22      	cmp	r3, #34	; 0x22
 8003860:	d107      	bne.n	8003872 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003878:	2b28      	cmp	r3, #40	; 0x28
 800387a:	d107      	bne.n	800388c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2228      	movs	r2, #40	; 0x28
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800388a:	e015      	b.n	80038b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d00a      	beq.n	80038b2 <I2C_ITError+0x7a>
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b60      	cmp	r3, #96	; 0x60
 80038a0:	d007      	beq.n	80038b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c6:	d162      	bne.n	800398e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d020      	beq.n	8003928 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <I2C_ITError+0x25c>)
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fcaa 	bl	800124c <HAL_DMA_Abort_IT>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8089 	beq.w	8003a12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003922:	4610      	mov	r0, r2
 8003924:	4798      	blx	r3
 8003926:	e074      	b.n	8003a12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <I2C_ITError+0x25c>)
 800392e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fc89 	bl	800124c <HAL_DMA_Abort_IT>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d068      	beq.n	8003a12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d10b      	bne.n	8003966 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003988:	4610      	mov	r0, r2
 800398a:	4798      	blx	r3
 800398c:	e041      	b.n	8003a12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b60      	cmp	r3, #96	; 0x60
 8003998:	d125      	bne.n	80039e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d10b      	bne.n	80039ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fef6 	bl	80027d0 <HAL_I2C_AbortCpltCallback>
 80039e4:	e015      	b.n	8003a12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d10b      	bne.n	8003a0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc ff9b 	bl	8000948 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10e      	bne.n	8003a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d113      	bne.n	8003a8c <I2C_ITError+0x254>
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b28      	cmp	r3, #40	; 0x28
 8003a68:	d110      	bne.n	8003a8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <I2C_ITError+0x260>)
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe fe98 	bl	80027bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	08003fbd 	.word	0x08003fbd
 8003a98:	ffff0000 	.word	0xffff0000

08003a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fb1a 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aec:	d103      	bne.n	8003af6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e05f      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	492d      	ldr	r1, [pc, #180]	; (8003bc4 <I2C_RequestMemoryWrite+0x128>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fb52 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e04c      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fbbc 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02b      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e021      	b.n	8003bb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb96 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e005      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	00010002 	.word	0x00010002

08003bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	817b      	strh	r3, [r7, #10]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	813b      	strh	r3, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa7c 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c28:	d103      	bne.n	8003c32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0aa      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	4952      	ldr	r1, [pc, #328]	; (8003d94 <I2C_RequestMemoryRead+0x1cc>)
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 fab4 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e097      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fb1e 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e076      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	e021      	b.n	8003cf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 faf8 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d107      	bne.n	8003ce6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e050      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cea:	893b      	ldrh	r3, [r7, #8]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	6a39      	ldr	r1, [r7, #32]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fadd 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d107      	bne.n	8003d1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e035      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f9e5 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d56:	d103      	bne.n	8003d60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e013      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	4906      	ldr	r1, [pc, #24]	; (8003d94 <I2C_RequestMemoryRead+0x1cc>)
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fa1d 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	00010002 	.word	0x00010002

08003d98 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	2200      	movs	r2, #0
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	2200      	movs	r2, #0
 8003dea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003df2:	2b21      	cmp	r3, #33	; 0x21
 8003df4:	d007      	beq.n	8003e06 <I2C_DMAXferCplt+0x6e>
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003dfc:	2b22      	cmp	r3, #34	; 0x22
 8003dfe:	d131      	bne.n	8003e64 <I2C_DMAXferCplt+0xcc>
 8003e00:	7cbb      	ldrb	r3, [r7, #18]
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d12e      	bne.n	8003e64 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e14:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	2b29      	cmp	r3, #41	; 0x29
 8003e20:	d10a      	bne.n	8003e38 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2228      	movs	r2, #40	; 0x28
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	f7fe fca1 	bl	8002778 <HAL_I2C_SlaveTxCpltCallback>
 8003e36:	e00c      	b.n	8003e52 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d109      	bne.n	8003e52 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2222      	movs	r2, #34	; 0x22
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2228      	movs	r2, #40	; 0x28
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	f7fe fc9d 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e62:	e06a      	b.n	8003f3a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d064      	beq.n	8003f3a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e98:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea0:	d009      	beq.n	8003eb6 <I2C_DMAXferCplt+0x11e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d006      	beq.n	8003eb6 <I2C_DMAXferCplt+0x11e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eae:	d002      	beq.n	8003eb6 <I2C_DMAXferCplt+0x11e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d107      	bne.n	8003ec6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003ef4:	6978      	ldr	r0, [r7, #20]
 8003ef6:	f7fc fd27 	bl	8000948 <HAL_I2C_ErrorCallback>
}
 8003efa:	e01e      	b.n	8003f3a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d10a      	bne.n	8003f26 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003f1e:	6978      	ldr	r0, [r7, #20]
 8003f20:	f7fc fcfe 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
}
 8003f24:	e009      	b.n	8003f3a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2212      	movs	r2, #18
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7fc fccb 	bl	80008d0 <HAL_I2C_MasterRxCpltCallback>
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fd fb25 	bl	80015c0 <HAL_DMA_GetError>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d01b      	beq.n	8003fb4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f043 0210 	orr.w	r2, r3, #16
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7fc fcca 	bl	8000948 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <I2C_DMAAbort+0x148>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	08db      	lsrs	r3, r3, #3
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <I2C_DMAAbort+0x14c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a1a      	lsrs	r2, r3, #8
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00da      	lsls	r2, r3, #3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004002:	e00a      	b.n	800401a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d0ea      	beq.n	8003ff0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b60      	cmp	r3, #96	; 0x60
 800408a:	d10e      	bne.n	80040aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7fe fb94 	bl	80027d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040a8:	e027      	b.n	80040fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d117      	bne.n	80040e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2228      	movs	r2, #40	; 0x28
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040e2:	e007      	b.n	80040f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7fc fc27 	bl	8000948 <HAL_I2C_ErrorCallback>
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000
 8004108:	14f8b589 	.word	0x14f8b589

0800410c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411c:	e025      	b.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d021      	beq.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fc fe49 	bl	8000dbc <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e023      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10d      	bne.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	e00c      	b.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0b6      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c8:	e051      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d123      	bne.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e046      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d021      	beq.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fc fdc7 	bl	8000dbc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e020      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d18d      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c4:	e02d      	b.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f86a 	bl	80043a0 <I2C_IsAcknowledgeFailed>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e02d      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d021      	beq.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fc fd6d 	bl	8000dbc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d116      	bne.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d1ca      	bne.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	4a13      	ldr	r2, [pc, #76]	; (800439c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	0a1a      	lsrs	r2, r3, #8
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b01      	subs	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f043 0220 	orr.w	r2, r3, #32
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e008      	b.n	800438c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004388:	d0e9      	beq.n	800435e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	20000000 	.word	0x20000000
 800439c:	14f8b589 	.word	0x14f8b589

080043a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b6:	d11b      	bne.n	80043f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800440e:	d103      	bne.n	8004418 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004416:	e007      	b.n	8004428 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004420:	d102      	bne.n	8004428 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2208      	movs	r2, #8
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e264      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d075      	beq.n	800453e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004452:	4ba3      	ldr	r3, [pc, #652]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d00c      	beq.n	8004478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445e:	4ba0      	ldr	r3, [pc, #640]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d112      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b9d      	ldr	r3, [pc, #628]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b99      	ldr	r3, [pc, #612]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <HAL_RCC_OscConfig+0x108>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e23f      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x74>
 800449a:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x98>
 80044b2:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a8a      	ldr	r2, [pc, #552]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a87      	ldr	r2, [pc, #540]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fc fc66 	bl	8000dbc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fc fc62 	bl	8000dbc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e204      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xc0>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fc fc52 	bl	8000dbc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451c:	f7fc fc4e 	bl	8000dbc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1f0      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0xe8>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004556:	4b62      	ldr	r3, [pc, #392]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1c4      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4952      	ldr	r1, [pc, #328]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fc fc07 	bl	8000dbc <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fc fc03 	bl	8000dbc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1a5      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4940      	ldr	r1, [pc, #256]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fc fbe6 	bl	8000dbc <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fc fbe2 	bl	8000dbc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e184      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fc fbc6 	bl	8000dbc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7fc fbc2 	bl	8000dbc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e164      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x200>
 8004652:	e015      	b.n	8004680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fc fbaf 	bl	8000dbc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004662:	f7fc fbab 	bl	8000dbc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e14d      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a0 	beq.w	80047ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d121      	bne.n	800470e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fc fb71 	bl	8000dbc <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e011      	b.n	8004702 <HAL_RCC_OscConfig+0x2ce>
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
 80046ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fc fb64 	bl	8000dbc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e106      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCC_OscConfig+0x4e4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x2f0>
 8004716:	4b81      	ldr	r3, [pc, #516]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a80      	ldr	r2, [pc, #512]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	e01c      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x312>
 800472c:	4b7b      	ldr	r3, [pc, #492]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a7a      	ldr	r2, [pc, #488]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	4b78      	ldr	r3, [pc, #480]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a77      	ldr	r2, [pc, #476]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	e00b      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004746:	4b75      	ldr	r3, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a74      	ldr	r2, [pc, #464]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a71      	ldr	r2, [pc, #452]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d015      	beq.n	8004792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fc fb29 	bl	8000dbc <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fc fb25 	bl	8000dbc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0c5      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	4b65      	ldr	r3, [pc, #404]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ee      	beq.n	800476e <HAL_RCC_OscConfig+0x33a>
 8004790:	e014      	b.n	80047bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fc fb13 	bl	8000dbc <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fc fb0f 	bl	8000dbc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0af      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	4b5a      	ldr	r3, [pc, #360]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ee      	bne.n	800479a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4b56      	ldr	r3, [pc, #344]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a55      	ldr	r2, [pc, #340]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 809b 	beq.w	800490e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d05c      	beq.n	800489e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d141      	bne.n	8004870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCC_OscConfig+0x4ec>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fc fae3 	bl	8000dbc <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc fadf 	bl	8000dbc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e081      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480c:	4b43      	ldr	r3, [pc, #268]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	019b      	lsls	r3, r3, #6
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	4937      	ldr	r1, [pc, #220]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCC_OscConfig+0x4ec>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fab8 	bl	8000dbc <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc fab4 	bl	8000dbc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e056      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x41c>
 800486e:	e04e      	b.n	800490e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <HAL_RCC_OscConfig+0x4ec>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fc faa1 	bl	8000dbc <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487e:	f7fc fa9d 	bl	8000dbc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e03f      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x44a>
 800489c:	e037      	b.n	800490e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e032      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <HAL_RCC_OscConfig+0x4e8>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d028      	beq.n	800490a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d121      	bne.n	800490a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d11a      	bne.n	800490a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048da:	4013      	ands	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d111      	bne.n	800490a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d107      	bne.n	800490a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40007000 	.word	0x40007000
 800491c:	40023800 	.word	0x40023800
 8004920:	42470060 	.word	0x42470060

08004924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0cc      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004938:	4b68      	ldr	r3, [pc, #416]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d90c      	bls.n	8004960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b63      	ldr	r3, [pc, #396]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0b8      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d020      	beq.n	80049ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004978:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004990:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800499a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499c:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	494d      	ldr	r1, [pc, #308]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d044      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b47      	ldr	r3, [pc, #284]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d119      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07f      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d003      	beq.n	80049e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06f      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f2:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e067      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a02:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4934      	ldr	r1, [pc, #208]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a14:	f7fc f9d2 	bl	8000dbc <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1c:	f7fc f9ce 	bl	8000dbc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e04f      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 020c 	and.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1eb      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a44:	4b25      	ldr	r3, [pc, #148]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20c      	bcs.n	8004a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5a:	4b20      	ldr	r3, [pc, #128]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e032      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4916      	ldr	r1, [pc, #88]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	490e      	ldr	r1, [pc, #56]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aaa:	f000 f821 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	490a      	ldr	r1, [pc, #40]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	5ccb      	ldrb	r3, [r1, r3]
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc f932 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023c00 	.word	0x40023c00
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	080057fc 	.word	0x080057fc
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000004 	.word	0x20000004

08004af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	2300      	movs	r3, #0
 8004b02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b08:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d00d      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x40>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	f200 80bd 	bhi.w	8004c94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x34>
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b22:	e0b7      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b26:	60bb      	str	r3, [r7, #8]
       break;
 8004b28:	e0b7      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b2a:	4b61      	ldr	r3, [pc, #388]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b2c:	60bb      	str	r3, [r7, #8]
      break;
 8004b2e:	e0b4      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b30:	4b5d      	ldr	r3, [pc, #372]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3a:	4b5b      	ldr	r3, [pc, #364]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d04d      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b46:	4b58      	ldr	r3, [pc, #352]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	ea02 0800 	and.w	r8, r2, r0
 8004b5e:	ea03 0901 	and.w	r9, r3, r1
 8004b62:	4640      	mov	r0, r8
 8004b64:	4649      	mov	r1, r9
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	014b      	lsls	r3, r1, #5
 8004b70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b74:	0142      	lsls	r2, r0, #5
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	ebb0 0008 	subs.w	r0, r0, r8
 8004b7e:	eb61 0109 	sbc.w	r1, r1, r9
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	018b      	lsls	r3, r1, #6
 8004b8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b90:	0182      	lsls	r2, r0, #6
 8004b92:	1a12      	subs	r2, r2, r0
 8004b94:	eb63 0301 	sbc.w	r3, r3, r1
 8004b98:	f04f 0000 	mov.w	r0, #0
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	00d9      	lsls	r1, r3, #3
 8004ba2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba6:	00d0      	lsls	r0, r2, #3
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	eb12 0208 	adds.w	r2, r2, r8
 8004bb0:	eb43 0309 	adc.w	r3, r3, r9
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	0259      	lsls	r1, r3, #9
 8004bbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004bc2:	0250      	lsls	r0, r2, #9
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	f7fb fafe 	bl	80001d4 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e04a      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	461a      	mov	r2, r3
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	ea02 0400 	and.w	r4, r2, r0
 8004bfa:	ea03 0501 	and.w	r5, r3, r1
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	014b      	lsls	r3, r1, #5
 8004c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c10:	0142      	lsls	r2, r0, #5
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	1b00      	subs	r0, r0, r4
 8004c18:	eb61 0105 	sbc.w	r1, r1, r5
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	018b      	lsls	r3, r1, #6
 8004c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c2a:	0182      	lsls	r2, r0, #6
 8004c2c:	1a12      	subs	r2, r2, r0
 8004c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	00d9      	lsls	r1, r3, #3
 8004c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c40:	00d0      	lsls	r0, r2, #3
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	1912      	adds	r2, r2, r4
 8004c48:	eb45 0303 	adc.w	r3, r5, r3
 8004c4c:	f04f 0000 	mov.w	r0, #0
 8004c50:	f04f 0100 	mov.w	r1, #0
 8004c54:	0299      	lsls	r1, r3, #10
 8004c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c5a:	0290      	lsls	r0, r2, #10
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	f7fb fab2 	bl	80001d4 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	3301      	adds	r3, #1
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	60bb      	str	r3, [r7, #8]
      break;
 8004c92:	e002      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c96:	60bb      	str	r3, [r7, #8]
      break;
 8004c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	00f42400 	.word	0x00f42400
 8004cb0:	007a1200 	.word	0x007a1200

08004cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000000 	.word	0x20000000

08004ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cd0:	f7ff fff0 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	0a9b      	lsrs	r3, r3, #10
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	0800580c 	.word	0x0800580c

08004cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cf8:	f7ff ffdc 	bl	8004cb4 <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0b5b      	lsrs	r3, r3, #13
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	; (8004d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	0800580c 	.word	0x0800580c

08004d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e03f      	b.n	8004dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fb ff50 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f929 	bl	8004fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b08a      	sub	sp, #40	; 0x28
 8004dba:	af02      	add	r7, sp, #8
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d17c      	bne.n	8004ed0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_UART_Transmit+0x2c>
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e075      	b.n	8004ed2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Transmit+0x3e>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e06e      	b.n	8004ed2 <HAL_UART_Transmit+0x11c>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2221      	movs	r2, #33	; 0x21
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e0a:	f7fb ffd7 	bl	8000dbc <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d108      	bne.n	8004e38 <HAL_UART_Transmit+0x82>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e003      	b.n	8004e40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e48:	e02a      	b.n	8004ea0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f840 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e036      	b.n	8004ed2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e007      	b.n	8004e92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1cf      	bne.n	8004e4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2140      	movs	r1, #64	; 0x40
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f810 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b090      	sub	sp, #64	; 0x40
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	e050      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d04c      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004efa:	f7fb ff5f 	bl	8000dbc <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d241      	bcs.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f2a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f5e:	623a      	str	r2, [r7, #32]
 8004f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	69f9      	ldr	r1, [r7, #28]
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e00f      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d09f      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3740      	adds	r7, #64	; 0x40
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	b09f      	sub	sp, #124	; 0x7c
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	68d9      	ldr	r1, [r3, #12]
 8004fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	ea40 0301 	orr.w	r3, r0, r1
 8004fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ffc:	f021 010c 	bic.w	r1, r1, #12
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005006:	430b      	orrs	r3, r1
 8005008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800500a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	6999      	ldr	r1, [r3, #24]
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	ea40 0301 	orr.w	r3, r0, r1
 8005020:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4bc5      	ldr	r3, [pc, #788]	; (800533c <UART_SetConfig+0x384>)
 8005028:	429a      	cmp	r2, r3
 800502a:	d004      	beq.n	8005036 <UART_SetConfig+0x7e>
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4bc3      	ldr	r3, [pc, #780]	; (8005340 <UART_SetConfig+0x388>)
 8005032:	429a      	cmp	r2, r3
 8005034:	d103      	bne.n	800503e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005036:	f7ff fe5d 	bl	8004cf4 <HAL_RCC_GetPCLK2Freq>
 800503a:	6778      	str	r0, [r7, #116]	; 0x74
 800503c:	e002      	b.n	8005044 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800503e:	f7ff fe45 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8005042:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504c:	f040 80b6 	bne.w	80051bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005052:	461c      	mov	r4, r3
 8005054:	f04f 0500 	mov.w	r5, #0
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	1891      	adds	r1, r2, r2
 800505e:	6439      	str	r1, [r7, #64]	; 0x40
 8005060:	415b      	adcs	r3, r3
 8005062:	647b      	str	r3, [r7, #68]	; 0x44
 8005064:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005068:	1912      	adds	r2, r2, r4
 800506a:	eb45 0303 	adc.w	r3, r5, r3
 800506e:	f04f 0000 	mov.w	r0, #0
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	00d9      	lsls	r1, r3, #3
 8005078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800507c:	00d0      	lsls	r0, r2, #3
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	1911      	adds	r1, r2, r4
 8005084:	6639      	str	r1, [r7, #96]	; 0x60
 8005086:	416b      	adcs	r3, r5
 8005088:	667b      	str	r3, [r7, #100]	; 0x64
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	461a      	mov	r2, r3
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	1891      	adds	r1, r2, r2
 8005096:	63b9      	str	r1, [r7, #56]	; 0x38
 8005098:	415b      	adcs	r3, r3
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050a4:	f7fb f896 	bl	80001d4 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4ba5      	ldr	r3, [pc, #660]	; (8005344 <UART_SetConfig+0x38c>)
 80050ae:	fba3 2302 	umull	r2, r3, r3, r2
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	011e      	lsls	r6, r3, #4
 80050b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b8:	461c      	mov	r4, r3
 80050ba:	f04f 0500 	mov.w	r5, #0
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	1891      	adds	r1, r2, r2
 80050c4:	6339      	str	r1, [r7, #48]	; 0x30
 80050c6:	415b      	adcs	r3, r3
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050ce:	1912      	adds	r2, r2, r4
 80050d0:	eb45 0303 	adc.w	r3, r5, r3
 80050d4:	f04f 0000 	mov.w	r0, #0
 80050d8:	f04f 0100 	mov.w	r1, #0
 80050dc:	00d9      	lsls	r1, r3, #3
 80050de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050e2:	00d0      	lsls	r0, r2, #3
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	1911      	adds	r1, r2, r4
 80050ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ec:	416b      	adcs	r3, r5
 80050ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	1891      	adds	r1, r2, r2
 80050fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80050fe:	415b      	adcs	r3, r3
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005106:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800510a:	f7fb f863 	bl	80001d4 <__aeabi_uldivmod>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4b8c      	ldr	r3, [pc, #560]	; (8005344 <UART_SetConfig+0x38c>)
 8005114:	fba3 1302 	umull	r1, r3, r3, r2
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	2164      	movs	r1, #100	; 0x64
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	3332      	adds	r3, #50	; 0x32
 8005126:	4a87      	ldr	r2, [pc, #540]	; (8005344 <UART_SetConfig+0x38c>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005134:	441e      	add	r6, r3
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	4618      	mov	r0, r3
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	1894      	adds	r4, r2, r2
 8005144:	623c      	str	r4, [r7, #32]
 8005146:	415b      	adcs	r3, r3
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
 800514a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800514e:	1812      	adds	r2, r2, r0
 8005150:	eb41 0303 	adc.w	r3, r1, r3
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	f04f 0500 	mov.w	r5, #0
 800515c:	00dd      	lsls	r5, r3, #3
 800515e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005162:	00d4      	lsls	r4, r2, #3
 8005164:	4622      	mov	r2, r4
 8005166:	462b      	mov	r3, r5
 8005168:	1814      	adds	r4, r2, r0
 800516a:	653c      	str	r4, [r7, #80]	; 0x50
 800516c:	414b      	adcs	r3, r1
 800516e:	657b      	str	r3, [r7, #84]	; 0x54
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	1891      	adds	r1, r2, r2
 800517c:	61b9      	str	r1, [r7, #24]
 800517e:	415b      	adcs	r3, r3
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800518a:	f7fb f823 	bl	80001d4 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4b6c      	ldr	r3, [pc, #432]	; (8005344 <UART_SetConfig+0x38c>)
 8005194:	fba3 1302 	umull	r1, r3, r3, r2
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	2164      	movs	r1, #100	; 0x64
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	3332      	adds	r3, #50	; 0x32
 80051a6:	4a67      	ldr	r2, [pc, #412]	; (8005344 <UART_SetConfig+0x38c>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	f003 0207 	and.w	r2, r3, #7
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4432      	add	r2, r6
 80051b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ba:	e0b9      	b.n	8005330 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051be:	461c      	mov	r4, r3
 80051c0:	f04f 0500 	mov.w	r5, #0
 80051c4:	4622      	mov	r2, r4
 80051c6:	462b      	mov	r3, r5
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	6139      	str	r1, [r7, #16]
 80051cc:	415b      	adcs	r3, r3
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d4:	1912      	adds	r2, r2, r4
 80051d6:	eb45 0303 	adc.w	r3, r5, r3
 80051da:	f04f 0000 	mov.w	r0, #0
 80051de:	f04f 0100 	mov.w	r1, #0
 80051e2:	00d9      	lsls	r1, r3, #3
 80051e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e8:	00d0      	lsls	r0, r2, #3
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	eb12 0804 	adds.w	r8, r2, r4
 80051f2:	eb43 0905 	adc.w	r9, r3, r5
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f04f 0100 	mov.w	r1, #0
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	008b      	lsls	r3, r1, #2
 800520a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800520e:	0082      	lsls	r2, r0, #2
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fa ffde 	bl	80001d4 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4b49      	ldr	r3, [pc, #292]	; (8005344 <UART_SetConfig+0x38c>)
 800521e:	fba3 2302 	umull	r2, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	011e      	lsls	r6, r3, #4
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	4618      	mov	r0, r3
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	1894      	adds	r4, r2, r2
 8005234:	60bc      	str	r4, [r7, #8]
 8005236:	415b      	adcs	r3, r3
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800523e:	1812      	adds	r2, r2, r0
 8005240:	eb41 0303 	adc.w	r3, r1, r3
 8005244:	f04f 0400 	mov.w	r4, #0
 8005248:	f04f 0500 	mov.w	r5, #0
 800524c:	00dd      	lsls	r5, r3, #3
 800524e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005252:	00d4      	lsls	r4, r2, #3
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	1814      	adds	r4, r2, r0
 800525a:	64bc      	str	r4, [r7, #72]	; 0x48
 800525c:	414b      	adcs	r3, r1
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	008b      	lsls	r3, r1, #2
 8005274:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005278:	0082      	lsls	r2, r0, #2
 800527a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800527e:	f7fa ffa9 	bl	80001d4 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <UART_SetConfig+0x38c>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	2164      	movs	r1, #100	; 0x64
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	3332      	adds	r3, #50	; 0x32
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <UART_SetConfig+0x38c>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a6:	441e      	add	r6, r3
 80052a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052aa:	4618      	mov	r0, r3
 80052ac:	f04f 0100 	mov.w	r1, #0
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	1894      	adds	r4, r2, r2
 80052b6:	603c      	str	r4, [r7, #0]
 80052b8:	415b      	adcs	r3, r3
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c0:	1812      	adds	r2, r2, r0
 80052c2:	eb41 0303 	adc.w	r3, r1, r3
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	f04f 0500 	mov.w	r5, #0
 80052ce:	00dd      	lsls	r5, r3, #3
 80052d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052d4:	00d4      	lsls	r4, r2, #3
 80052d6:	4622      	mov	r2, r4
 80052d8:	462b      	mov	r3, r5
 80052da:	eb12 0a00 	adds.w	sl, r2, r0
 80052de:	eb43 0b01 	adc.w	fp, r3, r1
 80052e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	008b      	lsls	r3, r1, #2
 80052f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052fa:	0082      	lsls	r2, r0, #2
 80052fc:	4650      	mov	r0, sl
 80052fe:	4659      	mov	r1, fp
 8005300:	f7fa ff68 	bl	80001d4 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <UART_SetConfig+0x38c>)
 800530a:	fba3 1302 	umull	r1, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	2164      	movs	r1, #100	; 0x64
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	3332      	adds	r3, #50	; 0x32
 800531c:	4a09      	ldr	r2, [pc, #36]	; (8005344 <UART_SetConfig+0x38c>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	f003 020f 	and.w	r2, r3, #15
 8005328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4432      	add	r2, r6
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	377c      	adds	r7, #124	; 0x7c
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	bf00      	nop
 800533c:	40011000 	.word	0x40011000
 8005340:	40011400 	.word	0x40011400
 8005344:	51eb851f 	.word	0x51eb851f

08005348 <imu_TxEnd>:
static void imu_Error(void);
static uint8_t MPU6050_configureRegisters(void);

/* Functions*/
static void imu_TxEnd(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
	MPU6050.FlagTxEnd = 1;
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <imu_TxEnd+0x1c>)
 800534e:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000194 	.word	0x20000194

08005368 <imu_RxEnd>:


static void imu_RxEnd(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
	MPU6050.FlagRxEnd = 1;
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <imu_RxEnd+0x1c>)
 800536e:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000194 	.word	0x20000194

08005388 <imu_Error>:

static void imu_Error(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
	MPU6050.FlagError = 1;
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <imu_Error+0x1c>)
 800538e:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000194 	.word	0x20000194

080053a8 <MPU6050_configureRegisters>:
//	//wait Tx end
//	while (MPU6050.FlagTxEnd == 0);
//}

static uint8_t MPU6050_configureRegisters(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
	// Power on MPU6050
	MPU6050.FlagTxEnd = 0;
 80053ac:	4a1f      	ldr	r2, [pc, #124]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053ae:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 80053b2:	f36f 0341 	bfc	r3, #1, #1
 80053b6:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
	MPU6050.TxBuffer[0] = 0x00;
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	MX_I2C1_Mem_Write(PWR_MGMT_1, 1, MPU6050.TxBuffer, 1);
 80053c2:	2301      	movs	r3, #1
 80053c4:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <MPU6050_configureRegisters+0x88>)
 80053c6:	2101      	movs	r1, #1
 80053c8:	206b      	movs	r0, #107	; 0x6b
 80053ca:	f7fb fa2d 	bl	8000828 <MX_I2C1_Mem_Write>
	while (MPU6050.FlagTxEnd == 0);
 80053ce:	bf00      	nop
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f7      	beq.n	80053d0 <MPU6050_configureRegisters+0x28>

	MPU6050.FlagRxEnd = 0;
 80053e0:	4a12      	ldr	r2, [pc, #72]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053e2:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 80053e6:	f36f 0300 	bfc	r3, #0, #1
 80053ea:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
	MPU6050.RxBuffer[0] = 0;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
	MX_I2C1_Mem_Read(PWR_MGMT_1, 1, MPU6050.RxBuffer, 1);
 80053f4:	2301      	movs	r3, #1
 80053f6:	4a0d      	ldr	r2, [pc, #52]	; (800542c <MPU6050_configureRegisters+0x84>)
 80053f8:	2101      	movs	r1, #1
 80053fa:	206b      	movs	r0, #107	; 0x6b
 80053fc:	f7fb fa34 	bl	8000868 <MX_I2C1_Mem_Read>
	while (MPU6050.FlagRxEnd == 0);
 8005400:	bf00      	nop
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <MPU6050_configureRegisters+0x84>)
 8005404:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f7      	beq.n	8005402 <MPU6050_configureRegisters+0x5a>
	return (MPU6050.TxBuffer[0] == MPU6050.RxBuffer[0]);
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <MPU6050_configureRegisters+0x84>)
 8005414:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <MPU6050_configureRegisters+0x84>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
}
 8005426:	4618      	mov	r0, r3
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000194 	.word	0x20000194
 8005430:	20000294 	.word	0x20000294

08005434 <MPU6050_init>:

void MPU6050_init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
	I2cConfig_st I2cConfig;
	I2cConfig.fEndRx = imu_RxEnd;
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <MPU6050_init+0xac>)
 800543c:	607b      	str	r3, [r7, #4]
	I2cConfig.fEndTx = imu_TxEnd;
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <MPU6050_init+0xb0>)
 8005440:	603b      	str	r3, [r7, #0]
	I2cConfig.fError = imu_Error;
 8005442:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <MPU6050_init+0xb4>)
 8005444:	60bb      	str	r3, [r7, #8]
	I2cConfig.DevAddress = MPU6050_ADDR;
 8005446:	23d0      	movs	r3, #208	; 0xd0
 8005448:	81bb      	strh	r3, [r7, #12]

	MX_I2C1_Configuration(&I2cConfig);
 800544a:	463b      	mov	r3, r7
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb f9cf 	bl	80007f0 <MX_I2C1_Configuration>

	// Power off MPU6050
	HAL_GPIO_WritePin(Alim_MPU6050_GPIO_Port, Alim_MPU6050_Pin, GPIO_PIN_RESET);
 8005452:	2200      	movs	r2, #0
 8005454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005458:	4824      	ldr	r0, [pc, #144]	; (80054ec <MPU6050_init+0xb8>)
 800545a:	f7fc fb21 	bl	8001aa0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800545e:	2064      	movs	r0, #100	; 0x64
 8005460:	f7fb fcb8 	bl	8000dd4 <HAL_Delay>

	// Power on MPU6050
	HAL_GPIO_WritePin(Alim_MPU6050_GPIO_Port, Alim_MPU6050_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800546a:	4820      	ldr	r0, [pc, #128]	; (80054ec <MPU6050_init+0xb8>)
 800546c:	f7fc fb18 	bl	8001aa0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005470:	2064      	movs	r0, #100	; 0x64
 8005472:	f7fb fcaf 	bl	8000dd4 <HAL_Delay>

	// Flags init
	MPU6050.FlagRxEnd = 0;
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <MPU6050_init+0xbc>)
 8005478:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 800547c:	f36f 0300 	bfc	r3, #0, #1
 8005480:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
	MX_I2C1_Mem_Read(WHO_AM_I, 1, MPU6050.RxBuffer, 1);
 8005484:	2301      	movs	r3, #1
 8005486:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <MPU6050_init+0xbc>)
 8005488:	2101      	movs	r1, #1
 800548a:	2075      	movs	r0, #117	; 0x75
 800548c:	f7fb f9ec 	bl	8000868 <MX_I2C1_Mem_Read>
	while (MPU6050.FlagRxEnd == 0);
 8005490:	bf00      	nop
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <MPU6050_init+0xbc>)
 8005494:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f7      	beq.n	8005492 <MPU6050_init+0x5e>


	if (MPU6050.RxBuffer[0] == 0x68)
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <MPU6050_init+0xbc>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b68      	cmp	r3, #104	; 0x68
 80054a8:	d111      	bne.n	80054ce <MPU6050_init+0x9a>
	{
		//MPU6050 detected
		MX_USART2_Transmit((uint8_t * )"MPU6050 detected\n", sizeof("MPU6050 detected\n"));
 80054aa:	2112      	movs	r1, #18
 80054ac:	4811      	ldr	r0, [pc, #68]	; (80054f4 <MPU6050_init+0xc0>)
 80054ae:	f7fb fbe3 	bl	8000c78 <MX_USART2_Transmit>
		// Configure register
		if (MPU6050_configureRegisters())
 80054b2:	f7ff ff79 	bl	80053a8 <MPU6050_configureRegisters>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <MPU6050_init+0xa2>
		{
			// MPU6050 init
			MPU6050.sState = MPU6050_RUNNING;
 80054bc:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <MPU6050_init+0xbc>)
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			MX_USART2_Transmit((uint8_t * )"MPU6050 configured\n", sizeof("MPU6050 configured\n"));
 80054c4:	2114      	movs	r1, #20
 80054c6:	480c      	ldr	r0, [pc, #48]	; (80054f8 <MPU6050_init+0xc4>)
 80054c8:	f7fb fbd6 	bl	8000c78 <MX_USART2_Transmit>
	}
	else
	{
		MX_USART2_Transmit((uint8_t * )"MPU6050 not detected\n", sizeof("MPU6050 not detected\n"));
	}
}
 80054cc:	e003      	b.n	80054d6 <MPU6050_init+0xa2>
		MX_USART2_Transmit((uint8_t * )"MPU6050 not detected\n", sizeof("MPU6050 not detected\n"));
 80054ce:	2116      	movs	r1, #22
 80054d0:	480a      	ldr	r0, [pc, #40]	; (80054fc <MPU6050_init+0xc8>)
 80054d2:	f7fb fbd1 	bl	8000c78 <MX_USART2_Transmit>
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	08005369 	.word	0x08005369
 80054e4:	08005349 	.word	0x08005349
 80054e8:	08005389 	.word	0x08005389
 80054ec:	40020000 	.word	0x40020000
 80054f0:	20000194 	.word	0x20000194
 80054f4:	080057bc 	.word	0x080057bc
 80054f8:	080057d0 	.word	0x080057d0
 80054fc:	080057e4 	.word	0x080057e4

08005500 <MPU6050_sendFrame>:

void MPU6050_sendFrame(uint8_t* pData, uint8_t size)
{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
	pData[size - 1] = CRC8(pData, size - 1);
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	3b01      	subs	r3, #1
 8005510:	b2d9      	uxtb	r1, r3
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	3b01      	subs	r3, #1
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	18d4      	adds	r4, r2, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f80c 	bl	8005538 <CRC8>
 8005520:	4603      	mov	r3, r0
 8005522:	7023      	strb	r3, [r4, #0]
	MX_USART2_Transmit(pData, size);
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b29b      	uxth	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fba4 	bl	8000c78 <MX_USART2_Transmit>
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}

08005538 <CRC8>:

uint8_t CRC8(uint8_t* pData, uint8_t size)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0x00;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; ++i)
 8005548:	2300      	movs	r3, #0
 800554a:	73bb      	strb	r3, [r7, #14]
 800554c:	e009      	b.n	8005562 <CRC8+0x2a>
	{
		crc = crc ^ pData[i];
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	781a      	ldrb	r2, [r3, #0]
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	4053      	eors	r3, r2
 800555a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; ++i)
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	3301      	adds	r3, #1
 8005560:	73bb      	strb	r3, [r7, #14]
 8005562:	7bba      	ldrb	r2, [r7, #14]
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	429a      	cmp	r2, r3
 8005568:	d3f1      	bcc.n	800554e <CRC8+0x16>
	}
	return crc;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <MPU6050_main>:

void MPU6050_main(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
	Frame frame;
	switch (MPU6050.sState)
 800557e:	4b72      	ldr	r3, [pc, #456]	; (8005748 <MPU6050_main+0x1d0>)
 8005580:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005584:	2b02      	cmp	r3, #2
 8005586:	f000 80d5 	beq.w	8005734 <MPU6050_main+0x1bc>
 800558a:	2b02      	cmp	r3, #2
 800558c:	f300 80d8 	bgt.w	8005740 <MPU6050_main+0x1c8>
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80d4 	beq.w	800573e <MPU6050_main+0x1c6>
 8005596:	2b01      	cmp	r3, #1
 8005598:	d000      	beq.n	800559c <MPU6050_main+0x24>
		case MPU6050_WAIT_TX_DATA:
			MPU6050.sState = MPU6050_RUNNING;
			break;
	}

}
 800559a:	e0d1      	b.n	8005740 <MPU6050_main+0x1c8>
			frame.header = 0x55;
 800559c:	2355      	movs	r3, #85	; 0x55
 800559e:	713b      	strb	r3, [r7, #4]
			for(uint8_t i = 0; i < SIZE_DATA * 2; i+=2)
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e0b8      	b.n	8005718 <MPU6050_main+0x1a0>
				MPU6050.FlagRxEnd = 0;
 80055a6:	4a68      	ldr	r2, [pc, #416]	; (8005748 <MPU6050_main+0x1d0>)
 80055a8:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 80055ac:	f36f 0300 	bfc	r3, #0, #1
 80055b0:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
				MPU6050.RxBuffer[0] = 0;
 80055b4:	4b64      	ldr	r3, [pc, #400]	; (8005748 <MPU6050_main+0x1d0>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
				MPU6050.RxBuffer[1] = 0;
 80055ba:	4b63      	ldr	r3, [pc, #396]	; (8005748 <MPU6050_main+0x1d0>)
 80055bc:	2200      	movs	r2, #0
 80055be:	705a      	strb	r2, [r3, #1]
				MPU6050.RxBuffer[2] = 0;
 80055c0:	4b61      	ldr	r3, [pc, #388]	; (8005748 <MPU6050_main+0x1d0>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	709a      	strb	r2, [r3, #2]
				MPU6050.RxBuffer[3] = 0;
 80055c6:	4b60      	ldr	r3, [pc, #384]	; (8005748 <MPU6050_main+0x1d0>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	70da      	strb	r2, [r3, #3]
				MPU6050.RxBuffer[4] = 0;
 80055cc:	4b5e      	ldr	r3, [pc, #376]	; (8005748 <MPU6050_main+0x1d0>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	711a      	strb	r2, [r3, #4]
				MPU6050.RxBuffer[5] = 0;
 80055d2:	4b5d      	ldr	r3, [pc, #372]	; (8005748 <MPU6050_main+0x1d0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	715a      	strb	r2, [r3, #5]
				MX_I2C1_Mem_Read(ACCEL_XOUT_H, 1, MPU6050.RxBuffer, 6);
 80055d8:	2306      	movs	r3, #6
 80055da:	4a5b      	ldr	r2, [pc, #364]	; (8005748 <MPU6050_main+0x1d0>)
 80055dc:	2101      	movs	r1, #1
 80055de:	203b      	movs	r0, #59	; 0x3b
 80055e0:	f7fb f942 	bl	8000868 <MX_I2C1_Mem_Read>
				while (MPU6050.FlagRxEnd == 0);
 80055e4:	bf00      	nop
 80055e6:	4b58      	ldr	r3, [pc, #352]	; (8005748 <MPU6050_main+0x1d0>)
 80055e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f7      	beq.n	80055e6 <MPU6050_main+0x6e>
				frame.accX[i] = MPU6050.RxBuffer[0];
 80055f6:	7ffb      	ldrb	r3, [r7, #31]
 80055f8:	4a53      	ldr	r2, [pc, #332]	; (8005748 <MPU6050_main+0x1d0>)
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	f107 0120 	add.w	r1, r7, #32
 8005600:	440b      	add	r3, r1
 8005602:	f803 2c1b 	strb.w	r2, [r3, #-27]
				frame.accX[i+1] = MPU6050.RxBuffer[1];
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	3301      	adds	r3, #1
 800560a:	4a4f      	ldr	r2, [pc, #316]	; (8005748 <MPU6050_main+0x1d0>)
 800560c:	7852      	ldrb	r2, [r2, #1]
 800560e:	f107 0120 	add.w	r1, r7, #32
 8005612:	440b      	add	r3, r1
 8005614:	f803 2c1b 	strb.w	r2, [r3, #-27]
				frame.accY[i] = MPU6050.RxBuffer[2];
 8005618:	7ffb      	ldrb	r3, [r7, #31]
 800561a:	4a4b      	ldr	r2, [pc, #300]	; (8005748 <MPU6050_main+0x1d0>)
 800561c:	7892      	ldrb	r2, [r2, #2]
 800561e:	f107 0120 	add.w	r1, r7, #32
 8005622:	440b      	add	r3, r1
 8005624:	f803 2c17 	strb.w	r2, [r3, #-23]
				frame.accY[i+1] = MPU6050.RxBuffer[3];
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	3301      	adds	r3, #1
 800562c:	4a46      	ldr	r2, [pc, #280]	; (8005748 <MPU6050_main+0x1d0>)
 800562e:	78d2      	ldrb	r2, [r2, #3]
 8005630:	f107 0120 	add.w	r1, r7, #32
 8005634:	440b      	add	r3, r1
 8005636:	f803 2c17 	strb.w	r2, [r3, #-23]
				frame.accZ[i] = MPU6050.RxBuffer[4];
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	4a42      	ldr	r2, [pc, #264]	; (8005748 <MPU6050_main+0x1d0>)
 800563e:	7912      	ldrb	r2, [r2, #4]
 8005640:	f107 0120 	add.w	r1, r7, #32
 8005644:	440b      	add	r3, r1
 8005646:	f803 2c13 	strb.w	r2, [r3, #-19]
				frame.accZ[i+1] = MPU6050.RxBuffer[5];
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	3301      	adds	r3, #1
 800564e:	4a3e      	ldr	r2, [pc, #248]	; (8005748 <MPU6050_main+0x1d0>)
 8005650:	7952      	ldrb	r2, [r2, #5]
 8005652:	f107 0120 	add.w	r1, r7, #32
 8005656:	440b      	add	r3, r1
 8005658:	f803 2c13 	strb.w	r2, [r3, #-19]
				MPU6050.FlagRxEnd = 0;
 800565c:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <MPU6050_main+0x1d0>)
 800565e:	f892 3200 	ldrb.w	r3, [r2, #512]	; 0x200
 8005662:	f36f 0300 	bfc	r3, #0, #1
 8005666:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
				MPU6050.RxBuffer[0] = 0;
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <MPU6050_main+0x1d0>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
				MPU6050.RxBuffer[1] = 0;
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <MPU6050_main+0x1d0>)
 8005672:	2200      	movs	r2, #0
 8005674:	705a      	strb	r2, [r3, #1]
				MPU6050.RxBuffer[2] = 0;
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <MPU6050_main+0x1d0>)
 8005678:	2200      	movs	r2, #0
 800567a:	709a      	strb	r2, [r3, #2]
				MPU6050.RxBuffer[3] = 0;
 800567c:	4b32      	ldr	r3, [pc, #200]	; (8005748 <MPU6050_main+0x1d0>)
 800567e:	2200      	movs	r2, #0
 8005680:	70da      	strb	r2, [r3, #3]
				MPU6050.RxBuffer[4] = 0;
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <MPU6050_main+0x1d0>)
 8005684:	2200      	movs	r2, #0
 8005686:	711a      	strb	r2, [r3, #4]
				MPU6050.RxBuffer[5] = 0;
 8005688:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <MPU6050_main+0x1d0>)
 800568a:	2200      	movs	r2, #0
 800568c:	715a      	strb	r2, [r3, #5]
				MX_I2C1_Mem_Read(GYRO_XOUT_H, 1, MPU6050.RxBuffer, 6);
 800568e:	2306      	movs	r3, #6
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <MPU6050_main+0x1d0>)
 8005692:	2101      	movs	r1, #1
 8005694:	2043      	movs	r0, #67	; 0x43
 8005696:	f7fb f8e7 	bl	8000868 <MX_I2C1_Mem_Read>
				while (MPU6050.FlagRxEnd == 0);
 800569a:	bf00      	nop
 800569c:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <MPU6050_main+0x1d0>)
 800569e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f7      	beq.n	800569c <MPU6050_main+0x124>
				frame.gyroX[i] = MPU6050.RxBuffer[0];
 80056ac:	7ffb      	ldrb	r3, [r7, #31]
 80056ae:	4a26      	ldr	r2, [pc, #152]	; (8005748 <MPU6050_main+0x1d0>)
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	f107 0120 	add.w	r1, r7, #32
 80056b6:	440b      	add	r3, r1
 80056b8:	f803 2c0f 	strb.w	r2, [r3, #-15]
				frame.gyroX[i+1] = MPU6050.RxBuffer[1];
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	3301      	adds	r3, #1
 80056c0:	4a21      	ldr	r2, [pc, #132]	; (8005748 <MPU6050_main+0x1d0>)
 80056c2:	7852      	ldrb	r2, [r2, #1]
 80056c4:	f107 0120 	add.w	r1, r7, #32
 80056c8:	440b      	add	r3, r1
 80056ca:	f803 2c0f 	strb.w	r2, [r3, #-15]
				frame.gyroY[i] = MPU6050.RxBuffer[2];
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <MPU6050_main+0x1d0>)
 80056d2:	7892      	ldrb	r2, [r2, #2]
 80056d4:	f107 0120 	add.w	r1, r7, #32
 80056d8:	440b      	add	r3, r1
 80056da:	f803 2c0b 	strb.w	r2, [r3, #-11]
				frame.gyroY[i+1] = MPU6050.RxBuffer[3];
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	3301      	adds	r3, #1
 80056e2:	4a19      	ldr	r2, [pc, #100]	; (8005748 <MPU6050_main+0x1d0>)
 80056e4:	78d2      	ldrb	r2, [r2, #3]
 80056e6:	f107 0120 	add.w	r1, r7, #32
 80056ea:	440b      	add	r3, r1
 80056ec:	f803 2c0b 	strb.w	r2, [r3, #-11]
				frame.gyroZ[i] = MPU6050.RxBuffer[4];
 80056f0:	7ffb      	ldrb	r3, [r7, #31]
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <MPU6050_main+0x1d0>)
 80056f4:	7912      	ldrb	r2, [r2, #4]
 80056f6:	f107 0120 	add.w	r1, r7, #32
 80056fa:	440b      	add	r3, r1
 80056fc:	f803 2c07 	strb.w	r2, [r3, #-7]
				frame.gyroZ[i+1] = MPU6050.RxBuffer[5];
 8005700:	7ffb      	ldrb	r3, [r7, #31]
 8005702:	3301      	adds	r3, #1
 8005704:	4a10      	ldr	r2, [pc, #64]	; (8005748 <MPU6050_main+0x1d0>)
 8005706:	7952      	ldrb	r2, [r2, #5]
 8005708:	f107 0120 	add.w	r1, r7, #32
 800570c:	440b      	add	r3, r1
 800570e:	f803 2c07 	strb.w	r2, [r3, #-7]
			for(uint8_t i = 0; i < SIZE_DATA * 2; i+=2)
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	3302      	adds	r3, #2
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	7ffb      	ldrb	r3, [r7, #31]
 800571a:	2b03      	cmp	r3, #3
 800571c:	f67f af43 	bls.w	80055a6 <MPU6050_main+0x2e>
			MPU6050_sendFrame((uint8_t*)&frame, sizeof(frame));
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	211a      	movs	r1, #26
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff feeb 	bl	8005500 <MPU6050_sendFrame>
			MPU6050.sState = MPU6050_WAIT_TX_DATA;
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <MPU6050_main+0x1d0>)
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			break;
 8005732:	e005      	b.n	8005740 <MPU6050_main+0x1c8>
			MPU6050.sState = MPU6050_RUNNING;
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <MPU6050_main+0x1d0>)
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			break;
 800573c:	e000      	b.n	8005740 <MPU6050_main+0x1c8>
			break;
 800573e:	bf00      	nop
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000194 	.word	0x20000194

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f000 f820 	bl	80057a4 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	08005824 	.word	0x08005824
 8005788:	08005824 	.word	0x08005824
 800578c:	08005824 	.word	0x08005824
 8005790:	08005828 	.word	0x08005828

08005794 <memset>:
 8005794:	4402      	add	r2, r0
 8005796:	4603      	mov	r3, r0
 8005798:	4293      	cmp	r3, r2
 800579a:	d100      	bne.n	800579e <memset+0xa>
 800579c:	4770      	bx	lr
 800579e:	f803 1b01 	strb.w	r1, [r3], #1
 80057a2:	e7f9      	b.n	8005798 <memset+0x4>

080057a4 <_init>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr

080057b0 <_fini>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr
